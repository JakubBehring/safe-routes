// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using safe_routes.data;

namespace safe_routes.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210506234002_cities added to db model")]
    partial class citiesaddedtodbmodel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("safe_routes.data.Airport", b =>
                {
                    b.Property<string>("airportName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("cityAndAirportName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cityIataCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("countryIso2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("countryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("gmt")
                        .HasColumnType("float");

                    b.Property<double>("latiude")
                        .HasColumnType("float");

                    b.Property<double>("longitude")
                        .HasColumnType("float");

                    b.Property<string>("timezone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("airportName");

                    b.ToTable("Airports");
                });

            modelBuilder.Entity("safe_routes.data.City", b =>
                {
                    b.Property<string>("cityName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("countryIso2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("geonameId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("gmt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("iataCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("timezone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("cityName");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("safe_routes.data.Country", b =>
                {
                    b.Property<string>("countryName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("active")
                        .HasColumnType("int");

                    b.Property<double>("activePerOneMillion")
                        .HasColumnType("float");

                    b.Property<int>("cases")
                        .HasColumnType("int");

                    b.Property<double>("casesPerOneMillion")
                        .HasColumnType("float");

                    b.Property<string>("continent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("critical")
                        .HasColumnType("int");

                    b.Property<double>("criticalPerOneMillion")
                        .HasColumnType("float");

                    b.Property<int>("deaths")
                        .HasColumnType("int");

                    b.Property<double>("deathsPerOneMillion")
                        .HasColumnType("float");

                    b.Property<string>("iso2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("iso3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("oneCasePerPeople")
                        .HasColumnType("float");

                    b.Property<double>("oneDeathPerPeople")
                        .HasColumnType("float");

                    b.Property<double>("oneTestPerPeople")
                        .HasColumnType("float");

                    b.Property<int>("population")
                        .HasColumnType("int");

                    b.Property<int>("recovered")
                        .HasColumnType("int");

                    b.Property<double>("recoveredPerOneMillion")
                        .HasColumnType("float");

                    b.Property<int>("tests")
                        .HasColumnType("int");

                    b.Property<double>("testsPerOneMillion")
                        .HasColumnType("float");

                    b.Property<int>("todayCases")
                        .HasColumnType("int");

                    b.Property<int>("todayDeaths")
                        .HasColumnType("int");

                    b.Property<int>("todayRecovered")
                        .HasColumnType("int");

                    b.HasKey("countryName");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("safe_routes.data.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("airlineName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("airlineSign")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("airportArrivalairportName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("airportDepartureairportName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("flightNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("iata")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("iataArrival")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("iataDeparture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("icao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("icaoArrival")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("icaoDeparture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("terminalArrival")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("terminalDeparture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("timeArrival")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("timeDeparture")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("timezoneArrival")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("timezoneDeparture")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("airportArrivalairportName");

                    b.HasIndex("airportDepartureairportName");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("safe_routes.data.Route", b =>
                {
                    b.HasOne("safe_routes.data.Airport", "airportArrival")
                        .WithMany()
                        .HasForeignKey("airportArrivalairportName");

                    b.HasOne("safe_routes.data.Airport", "airportDeparture")
                        .WithMany()
                        .HasForeignKey("airportDepartureairportName");

                    b.Navigation("airportArrival");

                    b.Navigation("airportDeparture");
                });
#pragma warning restore 612, 618
        }
    }
}
